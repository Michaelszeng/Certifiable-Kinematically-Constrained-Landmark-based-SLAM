import numpy as np

"""
This is a high noise test that fails on symbolic_tests_v2 but still converges
for symbolic_tests_v3
"""

d = 3   # dimension of space (3D)

# Measurement data: maps landmark to {timestamp: measurement} dicts
y_bar = {
    0: {
        0: np.array([[-2.1923,-9.7223,-1.2928]]).T,
        1: np.array([[-6.9393,-1.9987,-9.8464]]).T,
        2: np.array([[-7.7553,5.2416,-6.2156]]).T,
        3: np.array([[-9.4026,12.6507,-12.9964]]).T,
    },
    1: {
        0: np.array([[8.3364,9.9712,8.0838]]).T,
        1: np.array([[2.8587,-0.2665,0.7702]]).T,
        2: np.array([[3.9855,1.2266,1.5415]]).T,
        3: np.array([[2.2215,-2.6398,5.4996]]).T,
    },
    2: {
        0: np.array([[-8.0474,8.6824,2.1712]]).T,
        1: np.array([[-1.2904,11.7094,1.0096]]).T,
        2: np.array([[7.4686,14.1196,-0.6457]]).T,
        3: np.array([[11.3567,0.9624,2.7516]]).T,
    },
    3: {
        0: np.array([[8.6681,-6.4801,-8.2828]]).T,
        1: np.array([[4.9289,-7.8134,-6.9318]]).T,
        2: np.array([[-9.5583,-4.5857,-8.2158]]).T,
        3: np.array([[-13.3793,1.3254,-7.7194]]).T,
    },
}

N = 1
for lm_meas in y_bar.values():
    for timestep in lm_meas.keys():
        N = max(N, timestep + 1)
K = len(y_bar)

# Covariances
cov_v=1
cov_omega=1
cov_meas=1

# Ground Truths:
t_guess = np.array([
    [0.0, 0.0, 0.0],
    [1.0, 0.0, 0.5],
    [1.7071067811865475, 0.7071067811865476, 1.0],
    [1.7071067811865472, 1.7071067811865475, 1.5],
])
R_guess = np.array([
    [[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0]],
    [[0.7071067811865475, -0.7071067811865476, 0.0], [0.7071067811865476, 0.7071067811865475, 0.0], [0.0, 0.0, 1.0]],
    [[-1.7938038903913487e-16, -1.0, 0.0], [1.0, -1.9967346175427393e-16, 0.0], [0.0, 0.0, 1.0]],
    [[-0.7071067811865477, -0.7071067811865474, 0.0], [0.7071067811865474, -0.7071067811865477, 0.0], [0.0, 0.0, 1.0]],
])
v_guess = np.array([
    [1.0, 0.0, 0.5],
    [1.0, 0.0, 0.5],
    [1.0, 0.0, 0.5],
])
Omega_guess = np.array([
    [[0.7071067811865475, -0.7071067811865476, 0.0], [0.7071067811865476, 0.7071067811865475, 0.0], [0.0, 0.0, 1.0]],
    [[0.7071067811865475, -0.7071067811865476, 0.0], [0.7071067811865476, 0.7071067811865475, 0.0], [0.0, 0.0, 1.0]],
    [[0.7071067811865475, -0.7071067811865476, 0.0], [0.7071067811865476, 0.7071067811865475, 0.0], [0.0, 0.0, 1.0]],
])
p_guess = np.array([
    [-2.0840691008004386, -6.812263846289599, -7.090399405236356],
    [3.071030784752036, 3.875028585470517, 3.0000263827278157],
    [-8.83258220787396, 7.455347531595876, 2.22825510309076],
    [8.82615700212843, -5.6770065751786785, -8.587853396255094],
])
